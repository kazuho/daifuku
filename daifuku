#! /usr/bin/perl
#
# Copyright (c) 2015 Kazuho Oku
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

use strict;
use warnings;
use DBI;
use Getopt::Long;
use Pod::Usage;

our $VERSION = '0.1.0';

my ($mysql_host, $mysql_port, $mysql_socket, $user, $pass);
$user = 'root';

GetOptions(
    "host=s"   => \$mysql_host,
    "port=i"   => \$mysql_port,
    "socket=s" => \$mysql_socket,
    "user=s"   => \$user,
    "pass=s"   => \$pass,
    "help"     => sub {
        pod2usage(-exitval => 0, -verbose => 1);
    },
    "version"  => sub {
        print "daifuku version $VERSION\n";
        exit 0;
    },
) or exit(1);

if (@ARGV < 1) {
    die "Usage: $0 [options] dbname table1 table2 ...\n";
}

my $dbname = shift @ARGV;

# connect
my $dbh = do {
    my $dsn = "DBI:mysql:database=$dbname";
    $dsn .= ";host=$mysql_host"
        if $mysql_host;
    $dsn .= ";port=$mysql_port"
        if $mysql_port;
    $dsn .= ";mysql_socket=$mysql_socket"
        if $mysql_socket;
    DBI->connect($dsn, $user, defined $pass ? ($pass) : ())
        or die "failed to connect to $dsn:" . $DBI::errstr;
};

my @triggers = (
    "drop procedure if exists daifuku_begin",
    <<'EOT',
create procedure daifuku_begin(info longtext)
begin
  insert into daifuku_log (info,action) values (info,'[]');
  set @daifuku_id=@@last_insert_id;
  select trx_id into @daifuku_trx_id from information_schema.innodb_trx where trx_mysql_thread_id=connection_id();
end
EOT
    "drop procedure if exists daifuku_append_action",
    <<'EOT',
create procedure daifuku_append_action(v longtext)
begin
  update daifuku_log set action=if(char_length(action)<=2,concat('[',v,']'),concat(substring(action,1,char_length(action)-1),',',v,']')) where id=@daifuku_id;
end
EOT
    "drop function if exists daifuku_encode_string",
    <<'EOT',
create function daifuku_encode_string(src longtext) returns longtext deterministic
begin
  return concat('["',replace(to_base64(src),'\\n',''),'"]');
end
EOT
);

# get schema of the table
while (@ARGV) {
    my $tblname = shift;
    # fetch the list of columns
    my $rows = $dbh->selectall_arrayref('select * from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA=? and TABLE_NAME=?', { Slice => {} }, $dbname, $tblname)
        or die $dbh->errstr;
    # functions
    my $checkexpr = q{@daifuku_trx_id is not null and (select count(*) from information_schema.innodb_trx where trx_id=@daifuku_trx_id and trx_mysql_thread_id=connection_id()) = 1};
    my $build_row_args = sub {
        my $prefix = shift;
        my @args;
        for my $col (@$rows) {
            push @args, qq{',"$col->{COLUMN_NAME}":'};
            if ($col->{DATA_TYPE} =~ m{(?:integer|int|real)(\s?|$)}) {
                push @args, qq{concat('"',$prefix.$col->{COLUMN_NAME},'"')};
            } else {
                push @args, qq{daifuku_encode_string($prefix.$col->{COLUMN_NAME})};
            }
        }
        return +(qq{'{}'})
            unless @args;
        $args[0] =~ s|^',|'{|s;
        push @args, q|'}'|;
        @args;
    };
    # create insert trigger
    push @triggers, "drop trigger if exists daifuku_${tblname}_after_insert";
    push @triggers, <<"EOT";
create trigger daifuku_${tblname}_after_insert after insert on $tblname
for each row begin
  if $checkexpr then
    call daifuku_append_action(concat('["insert","$tblname",',@{[join ',', $build_row_args->('new')]},']'));
  end if;
end
EOT
    # create update trigger
    push @triggers, "drop trigger if exists daifuku_${tblname}_after_update";
    push @triggers, <<"EOT";
create trigger daifuku_${tblname}_after_update after update on $tblname
for each row begin
  if $checkexpr then
    call daifuku_append_action(concat('["update","$tblname",',@{[join ',', $build_row_args->('new')]},',',@{[join ',', $build_row_args->('old')]},']'));
  end if;
end
EOT
    # create delete trigger
    push @triggers, "drop trigger if exists daifuku_${tblname}_after_delete";
    push @triggers, <<"EOT";
create trigger daifuku_${tblname}_after_delete after delete on $tblname
for each row begin
  if $checkexpr then
    call daifuku_append_action(concat('["delete","$tblname",',@{[join ',', $build_row_args->('old')]},']'));
  end if;
end
EOT
}

chomp $_ for @triggers;

print "delimiter |\n";
print "$_|\n" for @triggers;
print "delimiter ;\n";

__END__

=head1 NAME

daifuku - transaction logging in JSON, within the MySQL database

=head1 SYNOPSIS

  # print stored procedures / triggers for the tables
  daifuku dbname tblname1 tblname2 ...

  # install the procedures and triggers
  daifuku dbname tblname1 tblname2 ... | mysql -u root dbname

=head1 DESCRIPTION

Daifuku generates stored procedures / triggers for logging the changes made through the transactions.

The log is collected in the L<daifuku_log> table in JSON format, so that it would be easy to use the log for whatever purpose (e.g. for audit, undo, display, etc.).

=head1 COMMAND OPTIONS

=head2 --host=host

=head2 --port=port

=head2 --socket=socket-file

override the default server location specified in C<my.cnf>

=head2 --user=username

username to be used for connecting to the database (default: `root`)

=head2 --pass=password

password to be used for connecting to the database (default: none)

=head2 --help

prints help

=head2 --version

prints the version number

=head1 STORED PROCEDURES

=head2 daifuku_begin(info)

The function instructs the triggers to log the current transaction.  Upon return, the id of the row within the L<daifuku_log> table in which the transaction will be logged is stored in the C<@daifuku_id> user variable.  Arbitrary text can be passed as an argument, which would be stored in the `info` column of the L<daifuku_log> table.

The function cannot be used outside of a transaction.

=head1 AUTHOR

Kazuho Oku

=head1 LICENSE

The software is licensed under the MIT license.

=cut
