#! /usr/bin/perl

use strict;
use warnings;
use DBI;
use Getopt::Long;

my ($mysql_host, $mysql_port, $mysql_socket);

GetOptions(
    "host=s"   => \$mysql_host,
    "port=i"   => \$mysql_port,
    "socket=s" => \$mysql_socket,
) or exit(1);

if (@ARGV < 1) {
    die "Usage: $0 [options] dbname table1 table2 ...\n";
}

my $dbname = shift @ARGV;

# connect
my $dbh = do {
    my $dsn = "DBI:mysql:database=$dbname;user=root";
    $dsn .= ";host=$mysql_host"
        if $mysql_host;
    $dsn .= ";port=$mysql_port"
        if $mysql_port;
    $dsn .= ";mysql_socket=$mysql_socket"
        if $mysql_socket;
    DBI->connect($dsn)
        or die "failed to connect to $dsn:" . $DBI::errstr;
};

my @triggers = (
    "drop procedure if exists myfuku_begin",
    <<'EOT',
create procedure myfuku_begin()
begin
    insert into myfuku_log (action) values ('');
    set @myfuku_id=@@last_insert_id;
    select trx_id into @myfuku_trx_id from information_schema.innodb_trx where trx_mysql_thread_id=connection_id();
end
EOT
);

# get schema of the table
while (@ARGV) {
    my $tblname = shift;
    # fetch the list of columns
    my $rows = $dbh->selectall_arrayref('select * from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA=? and TABLE_NAME=?', { Slice => {} }, $dbname, $tblname)
        or die $dbh->errstr;
    # create trigger
    push @triggers, "drop trigger if exists myfuku_${tblname}_after_insert";
    push @triggers, do {
        my $builder = sub {
            my @args;
            for my $col (@$rows) {
                push @args, qq{',"$col->{COLUMN_NAME}":'};
                if ($col->{DATA_TYPE} =~ m{(?:integer|int|real)(\s?|$)}) {
                    push @args, "new.$col->{COLUMN_NAME}";
                } else {
                    push @args, qq{concat('"',replace(to_base64(new.$col->{COLUMN_NAME}),'\\n',''),'"')};
                }
            }
            if (@args) {
                $args[0] =~ s|^',|'["insert","$tblname",{|s;
                push @args, q|'}]'|;
                return "concat(" . join(",", @args) . ")";
            } else {
                return qq{'["insert","$tblname",{}]'};
            }
        };
        <<"EOT";
create trigger myfuku_${tblname}_after_insert after insert on $tblname
for each row begin
  declare v longtext;
  if \@myfuku_trx_id is not null and (select count(*) from information_schema.innodb_trx where trx_id=\@myfuku_trx_id and trx_mysql_thread_id=connection_id()) = 1 then
    set v = @{[$builder->()]};
    update myfuku_log set action=concat(action,',',v) where id=\@myfuku_id;
  end if;
end
EOT
    };
}

chomp $_ for @triggers;

print "delimiter |\n";
print "$_|\n" for @triggers;
print "delimiter ;\n";
